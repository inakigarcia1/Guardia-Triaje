// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Guardia.Bdd.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "medico")]
    [Xunit.TraitAttribute("Category", "guardia")]
    public partial class AtencionEnGuardiaPorPrioridadFeature : object, Xunit.IClassFixture<AtencionEnGuardiaPorPrioridadFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "medico",
                "guardia"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en"), "Features", "Atención en guardia por prioridad", "  Para asegurar atención oportuna\r\n  Como médico de guardia\r\n  Quiero ver la list" +
                "a de pacientes con triaje por prioridad y registrar Atenciones", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "AtenderPaciente.feature"
#line hidden
        
        public AtencionEnGuardiaPorPrioridadFeature(AtencionEnGuardiaPorPrioridadFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 8
#line hidden
#line 9
 await testRunner.GivenAsync("estoy autenticado como médico de guardia", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 10
 await testRunner.AndAsync("hay pacientes con triaje en espera con prioridades: \"Crítica\", \"Emergencia\", \"Urg" +
                    "encia\", \"Urgencia menor\", \"Sin urgencia\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ver la lista ordenada por prioridad")]
        [Xunit.TraitAttribute("FeatureTitle", "Atención en guardia por prioridad")]
        [Xunit.TraitAttribute("Description", "Ver la lista ordenada por prioridad")]
        [Xunit.TraitAttribute("Category", "orden")]
        public async System.Threading.Tasks.Task VerLaListaOrdenadaPorPrioridad()
        {
            string[] tagsOfScenario = new string[] {
                    "orden"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ver la lista ordenada por prioridad", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
#line 14
 await testRunner.GivenAsync("existen los pacientes \"Ana\" (Crítica), \"Bruno\" (Urgencia), \"Carla\" (Emergencia)", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 15
 await testRunner.WhenAsync("consulto la lista de pacientes con triaje", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 16
 await testRunner.ThenAsync("la lista se presenta en orden: \"Ana\", \"Carla\", \"Bruno\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Mismo nivel de prioridad, se atiende por mayor antigüedad de espera")]
        [Xunit.TraitAttribute("FeatureTitle", "Atención en guardia por prioridad")]
        [Xunit.TraitAttribute("Description", "Mismo nivel de prioridad, se atiende por mayor antigüedad de espera")]
        [Xunit.TraitAttribute("Category", "desempate")]
        public async System.Threading.Tasks.Task MismoNivelDePrioridadSeAtiendePorMayorAntiguedadDeEspera()
        {
            string[] tagsOfScenario = new string[] {
                    "desempate"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Mismo nivel de prioridad, se atiende por mayor antigüedad de espera", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
#line 20
 await testRunner.GivenAsync("\"Dora\" (Emergencia, espera 40 min) y \"Ezequiel\" (Emergencia, espera 15 min)", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 21
 await testRunner.WhenAsync("consulto la lista de pacientes con triaje", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
 await testRunner.ThenAsync("la lista se presenta en orden: \"Ana\", \"Ezequiel\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registrar Atención completa")]
        [Xunit.TraitAttribute("FeatureTitle", "Atención en guardia por prioridad")]
        [Xunit.TraitAttribute("Description", "Registrar Atención completa")]
        [Xunit.TraitAttribute("Category", "registro")]
        public async System.Threading.Tasks.Task RegistrarAtencionCompleta()
        {
            string[] tagsOfScenario = new string[] {
                    "registro"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registrar Atención completa", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
#line 26
 await testRunner.GivenAsync("el paciente \"Mateo\" (Urgencia) está en espera", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 27
 await testRunner.WhenAsync("inicio la atención de \"Mateo\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 28
 await testRunner.AndAsync("registro diagnóstico presuntivo \"Estreñimiento\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
 await testRunner.AndAsync("registro procedimientos realizados:", "Se realizó una manometría anorrectal", ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
 await testRunner.ThenAsync("queda registrada la Atención en Guardia de \"Mateo\" con todos los datos ingresados" +
                        "", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 34
 await testRunner.AndAsync("\"Mateo\" deja de figurar en la lista de espera", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await AtencionEnGuardiaPorPrioridadFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await AtencionEnGuardiaPorPrioridadFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
