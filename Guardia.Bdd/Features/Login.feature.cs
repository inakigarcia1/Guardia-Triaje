// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Guardia.Bdd.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "login")]
    [Xunit.TraitAttribute("Category", "auth")]
    public partial class AutenticacionDeUsuariosLoginFeature : object, Xunit.IClassFixture<AutenticacionDeUsuariosLoginFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "login",
                "auth"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en"), "Features", "Autenticación de usuarios (Login)", "  Para acceder a la aplicación de guardia\r\n  Como usuario registrado\r\n  Quiero in" +
                "iciar sesión", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Login.feature"
#line hidden
        
        public AutenticacionDeUsuariosLoginFeature(AutenticacionDeUsuariosLoginFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 8
#line hidden
#line 9
 await testRunner.GivenAsync("que existe un usuario \"enfermero@mail.com\" con contraseña \"SoyEnfemer0!\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Login exitoso")]
        [Xunit.TraitAttribute("FeatureTitle", "Autenticación de usuarios (Login)")]
        [Xunit.TraitAttribute("Description", "Login exitoso")]
        [Xunit.TraitAttribute("Category", "feliz")]
        [Xunit.TraitAttribute("Category", "ui")]
        [Xunit.TraitAttribute("Category", "api")]
        public async System.Threading.Tasks.Task LoginExitoso()
        {
            string[] tagsOfScenario = new string[] {
                    "feliz",
                    "ui",
                    "api"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Login exitoso", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
#line 13
 await testRunner.WhenAsync("ingreso email \"enfermero@mail.com\" y contraseña \"SoyEnfemer0!\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 14
 await testRunner.ThenAsync("ingreso correctamente a la aplicación", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Credenciales inválidas")]
        [Xunit.TraitAttribute("FeatureTitle", "Autenticación de usuarios (Login)")]
        [Xunit.TraitAttribute("Description", "Credenciales inválidas")]
        [Xunit.TraitAttribute("Category", "validacion")]
        [Xunit.TraitAttribute("Category", "seguridad")]
        [Xunit.InlineDataAttribute("enfermero@mail.com", "WrongPass", new string[0])]
        [Xunit.InlineDataAttribute("usuario_inexistente@foo", "SoyEnfemer0!", new string[0])]
        [Xunit.InlineDataAttribute("", "SoyEnfemer0!", new string[0])]
        [Xunit.InlineDataAttribute("enfermero@mail.com", "", new string[0])]
        public async System.Threading.Tasks.Task CredencialesInvalidas(string email, string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "validacion",
                    "seguridad"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("password", password);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Credenciales inválidas", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
#line 18
 await testRunner.WhenAsync(string.Format("ingreso email \"{0}\" y contraseña \"{1}\"", email, password), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 19
 await testRunner.AndAsync("hago clic en \"Iniciar sesión\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
 await testRunner.ThenAsync("veo el error \"Credenciales inválidas\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 21
 await testRunner.AndAsync("no ingreso a la aplicación", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Email y contraseña obligatorios")]
        [Xunit.TraitAttribute("FeatureTitle", "Autenticación de usuarios (Login)")]
        [Xunit.TraitAttribute("Description", "Email y contraseña obligatorios")]
        [Xunit.TraitAttribute("Category", "validacion")]
        public async System.Threading.Tasks.Task EmailYContrasenaObligatorios()
        {
            string[] tagsOfScenario = new string[] {
                    "validacion"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Email y contraseña obligatorios", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
#line 32
 await testRunner.WhenAsync("dejo vacío el email y la contraseña", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 33
 await testRunner.AndAsync("hago clic en \"Iniciar sesión\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 34
 await testRunner.ThenAsync("veo el error \"El email es obligatorio\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 35
 await testRunner.AndAsync("veo el error \"La contraseña es obligatoria\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
 await testRunner.AndAsync("el login no se realiza", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await AutenticacionDeUsuariosLoginFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await AutenticacionDeUsuariosLoginFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
