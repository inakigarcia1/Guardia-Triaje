// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Guardia.Bdd.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "triaje")]
    [Xunit.TraitAttribute("Category", "alertas")]
    [Xunit.TraitAttribute("Category", "tiempos")]
    public partial class AlertasPorTiempoDeEsperaExcedidoSegunPrioridadFeature : object, Xunit.IClassFixture<AlertasPorTiempoDeEsperaExcedidoSegunPrioridadFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "triaje",
                "alertas",
                "tiempos"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en"), "Features", "Alertas por tiempo de espera excedido según prioridad", "  Para cumplir tiempos máximos por nivel de triaje\r\n  Como médico\r\n  Quiero recib" +
                "ir alertas visibles y sonoras cuando el tiempo se exceda", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TiempoDeEsperaExcedido.feature"
#line hidden
        
        public AlertasPorTiempoDeEsperaExcedidoSegunPrioridadFeature(AlertasPorTiempoDeEsperaExcedidoSegunPrioridadFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 8
#line hidden
            global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                        "prioridad",
                        "max_espera_min"});
            table1.AddRow(new string[] {
                        "Crítica",
                        "0"});
            table1.AddRow(new string[] {
                        "Emergencia",
                        "30"});
            table1.AddRow(new string[] {
                        "Urgencia",
                        "60"});
            table1.AddRow(new string[] {
                        "Urgencia menor",
                        "120"});
            table1.AddRow(new string[] {
                        "Sin urgencia",
                        "240"});
#line 9
 await testRunner.GivenAsync("que existen tiempos máximos configurados por prioridad:", ((string)(null)), table1, "Given ");
#line hidden
#line 16
 await testRunner.AndAsync("existe el paciente \"María Flores\" con prioridad \"Urgencia\" en espera desde hace 6" +
                    "5 minutos", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
 await testRunner.AndAsync("estoy viendo la lista de pacientes con triaje asignado", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generar alerta")]
        [Xunit.TraitAttribute("FeatureTitle", "Alertas por tiempo de espera excedido según prioridad")]
        [Xunit.TraitAttribute("Description", "Generar alerta")]
        [Xunit.TraitAttribute("Category", "alerta")]
        public async System.Threading.Tasks.Task GenerarAlerta()
        {
            string[] tagsOfScenario = new string[] {
                    "alerta"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Generar alerta", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
#line 21
 await testRunner.WhenAsync("el tiempo de espera de \"María Flores\" supera el máximo de su prioridad", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
 await testRunner.ThenAsync("se dispara una alerta en el panel", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 23
 await testRunner.AndAsync("la alerta muestra: nombre \"María Flores\", prioridad \"Urgencia\" y tiempo excedido " +
                        "\"5 min\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
 await testRunner.AndAsync("\"María Flores\" pasa a ser la primer paciente en la lista", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Excesos de tiempo por antigüedad")]
        [Xunit.TraitAttribute("FeatureTitle", "Alertas por tiempo de espera excedido según prioridad")]
        [Xunit.TraitAttribute("Description", "Excesos de tiempo por antigüedad")]
        public async System.Threading.Tasks.Task ExcesosDeTiempoPorAntiguedad()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Excesos de tiempo por antigüedad", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
#line 27
  await testRunner.GivenAsync("existe el paciente \"Juan Pérez\" con prioridad \"Urgencia\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 28
  await testRunner.WhenAsync("el paciente \"Juan Pérez\" supera el tiempo máximo por 2 minutos", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 29
  await testRunner.ThenAsync("\"Juan Pérez\" aparece en la lista con menos prioridad que \"María Flores\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await AlertasPorTiempoDeEsperaExcedidoSegunPrioridadFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await AlertasPorTiempoDeEsperaExcedidoSegunPrioridadFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
