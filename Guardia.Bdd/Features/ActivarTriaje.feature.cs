// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Guardia.Bdd.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "triaje")]
    [Xunit.TraitAttribute("Category", "adulto")]
    public partial class ActivacionDeTriajeParaPacienteAdultoFeature : object, Xunit.IClassFixture<ActivacionDeTriajeParaPacienteAdultoFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "triaje",
                "adulto"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en"), "Features", "Activación de triaje para paciente adulto", "  Para derivar pacientes adultos a una guardia con prioridad\r\n  Como enfermero/a\r" +
                "\n  Quiero registrar motivo, signos vitales y observaciones, asignar prioridad", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ActivarTriaje.feature"
#line hidden
        
        public ActivacionDeTriajeParaPacienteAdultoFeature(ActivacionDeTriajeParaPacienteAdultoFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 8
#line hidden
#line 9
 await testRunner.GivenAsync("que existe una lista de pacientes PENDIENTES de triaje", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 10
 await testRunner.AndAsync("existe el paciente \"Santino Hamada\" de 30 años con un ingreso registrado", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
 await testRunner.AndAsync("hay prioridades preestablecidas: \"Sin urgencia\", \"Urgencia menor\", \"Urgencia\", \"E" +
                    "mergencia\", \"Crítica\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
 await testRunner.AndAsync("yo inicio sesión como usuario con rol \"ENFERMERO\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Seleccionar paciente PENDIENTE de triaje")]
        [Xunit.TraitAttribute("FeatureTitle", "Activación de triaje para paciente adulto")]
        [Xunit.TraitAttribute("Description", "Seleccionar paciente PENDIENTE de triaje")]
        [Xunit.TraitAttribute("Category", "seleccion")]
        public async System.Threading.Tasks.Task SeleccionarPacientePENDIENTEDeTriaje()
        {
            string[] tagsOfScenario = new string[] {
                    "seleccion"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Seleccionar paciente PENDIENTE de triaje", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
#line 20
 await testRunner.WhenAsync("selecciono el registro de atención PENDIENTE del paciente \"Santino Hamada\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 21
 await testRunner.ThenAsync("veo los datos del paciente", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Crear triaje adulto con signos vitales válidos (flujo básico)")]
        [Xunit.TraitAttribute("FeatureTitle", "Activación de triaje para paciente adulto")]
        [Xunit.TraitAttribute("Description", "Crear triaje adulto con signos vitales válidos (flujo básico)")]
        [Xunit.TraitAttribute("Category", "basico")]
        public async System.Threading.Tasks.Task CrearTriajeAdultoConSignosVitalesValidosFlujoBasico()
        {
            string[] tagsOfScenario = new string[] {
                    "basico"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Crear triaje adulto con signos vitales válidos (flujo básico)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
#line 25
 await testRunner.GivenAsync("seleccioné al paciente \"Santino Hamada\" con triaje PENDIENTE", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 26
 await testRunner.WhenAsync("registro el motivo \"fiebre\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
 await testRunner.AndAsync("registro los signos vitales: FC 80 ppm, TA 120/80 mmHg, SO 95, T 38", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
 await testRunner.AndAsync("registro observaciones \"sin particularidades\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
 await testRunner.AndAsync("asigno la prioridad \"Urgencia menor\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
 await testRunner.ThenAsync("se crea el triaje", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 31
 await testRunner.AndAsync("el paciente deja de figurar en la lista de pendientes", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Triaje con campos no válidos")]
        [Xunit.TraitAttribute("FeatureTitle", "Activación de triaje para paciente adulto")]
        [Xunit.TraitAttribute("Description", "Triaje con campos no válidos")]
        [Xunit.TraitAttribute("Category", "validacion")]
        [Xunit.InlineDataAttribute("FC", "-80", "80", new string[0])]
        [Xunit.InlineDataAttribute("T", "10", "38", new string[0])]
        [Xunit.InlineDataAttribute("SO", "30", "95", new string[0])]
        [Xunit.InlineDataAttribute("TA", "2", "12", new string[0])]
        [Xunit.InlineDataAttribute("Motivo", "\"\"", "\"Fiebre\"", new string[0])]
        public async System.Threading.Tasks.Task TriajeConCamposNoValidos(string campo, string valor_Invalido, string valor_Valido, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "validacion"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("campo", campo);
            argumentsOfScenario.Add("valor_invalido", valor_Invalido);
            argumentsOfScenario.Add("valor_valido", valor_Valido);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Triaje con campos no válidos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
await this.FeatureBackgroundAsync();
#line hidden
#line 35
 await testRunner.GivenAsync("selecciono el registro de atención PENDIENTE del paciente \"Santino Hamada\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 36
 await testRunner.WhenAsync(string.Format("intento guardar signos vitales inválidos: {0} = {1}", campo, valor_Invalido), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 37
 await testRunner.ThenAsync(string.Format("se solicita corrección del dato \"{0}\"", campo), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 38
 await testRunner.WhenAsync(string.Format("corrijo \"{0}\" a \"{1}\"", campo, valor_Valido), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 39
 await testRunner.AndAsync("asigno la prioridad \"Urgencia menor\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
 await testRunner.ThenAsync("se crea el triaje", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 41
 await testRunner.AndAsync("el paciente deja de figurar en la lista de pendientes", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ActivacionDeTriajeParaPacienteAdultoFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ActivacionDeTriajeParaPacienteAdultoFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
