// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Guardia.Bdd.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RegistrarIngresoFeature : object, Xunit.IClassFixture<RegistrarIngresoFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Registrar Ingreso", ("  Como enfermera\r\n  Quiero poder registrar las admisiones de los pacientes a urge" +
                "ncias\r\n  Para determinar que pacientes tienen mayor prioridad de atención"), global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "RegistrarIngreso.feature"
#line hidden
        
        public RegistrarIngresoFeature(RegistrarIngresoFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
#line hidden
            global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                        "Nivel",
                        "Color",
                        "Tiempo Maximo"});
            table1.AddRow(new string[] {
                        "Critico",
                        "Rojo",
                        "5"});
            table1.AddRow(new string[] {
                        "Emergencia",
                        "Naranja",
                        "30"});
            table1.AddRow(new string[] {
                        "Urgencia",
                        "Amarillo",
                        "60"});
            table1.AddRow(new string[] {
                        "UrgenciaMenor",
                        "Verde",
                        "120"});
            table1.AddRow(new string[] {
                        "SinUrgencia",
                        "Azul",
                        "240"});
#line 7
 await testRunner.GivenAsync("que existe un sistema de guardia con niveles de emergencia:", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ingresar paciente existente con datos válidos")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar Ingreso")]
        [Xunit.TraitAttribute("Description", "Ingresar paciente existente con datos válidos")]
        public async System.Threading.Tasks.Task IngresarPacienteExistenteConDatosValidos()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ingresar paciente existente con datos válidos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 16
 await testRunner.GivenAsync("que existe un paciente con DNI \"12345678\" y nombre \"Juan Pérez\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 17
 await testRunner.AndAsync("que existe una enfermera con matrícula \"ENF001\" y nombre \"María González\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Campo",
                            "Valor"});
                table2.AddRow(new string[] {
                            "Informe",
                            "Dolor de pecho intenso"});
                table2.AddRow(new string[] {
                            "Nivel de Emergencia",
                            "Critico"});
                table2.AddRow(new string[] {
                            "Frecuencia Cardiaca",
                            "120"});
                table2.AddRow(new string[] {
                            "Frecuencia Respiratoria",
                            "20"});
                table2.AddRow(new string[] {
                            "Tensión Sistólica",
                            "140"});
                table2.AddRow(new string[] {
                            "Tensión Diastólica",
                            "90"});
#line 18
 await testRunner.WhenAsync("la enfermera registra un ingreso para el paciente con:", ((string)(null)), table2, "When ");
#line hidden
#line 26
 await testRunner.ThenAsync("el ingreso se registra correctamente", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 27
 await testRunner.AndAsync("el paciente queda en estado PENDIENTE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
 await testRunner.AndAsync("el ingreso se agrega a la cola de atención", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ingresar paciente inexistente con datos válidos")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar Ingreso")]
        [Xunit.TraitAttribute("Description", "Ingresar paciente inexistente con datos válidos")]
        public async System.Threading.Tasks.Task IngresarPacienteInexistenteConDatosValidos()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ingresar paciente inexistente con datos válidos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 31
 await testRunner.GivenAsync("que no existe un paciente con DNI \"87654321\" y nombre \"Santino Hamada\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 32
 await testRunner.AndAsync("que existe una enfermera con matrícula \"ENF001\" y nombre \"María González\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Campo",
                            "Valor"});
                table3.AddRow(new string[] {
                            "Informe",
                            "Dolor de pecho intenso"});
                table3.AddRow(new string[] {
                            "Nivel de Emergencia",
                            "Critico"});
                table3.AddRow(new string[] {
                            "Frecuencia Cardiaca",
                            "120"});
                table3.AddRow(new string[] {
                            "Frecuencia Respiratoria",
                            "20"});
                table3.AddRow(new string[] {
                            "Tensión Sistólica",
                            "140"});
                table3.AddRow(new string[] {
                            "Tensión Diastólica",
                            "90"});
#line 33
 await testRunner.WhenAsync("la enfermera registra un ingreso para el paciente con:", ((string)(null)), table3, "When ");
#line hidden
#line 41
 await testRunner.ThenAsync("se debe crear el paciente antes de proceder al registro del ingreso", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 42
 await testRunner.AndAsync("el ingreso se registra correctamente", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
 await testRunner.AndAsync("el paciente queda en estado PENDIENTE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
 await testRunner.AndAsync("el ingreso se agrega a la cola de atención", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ingresar paciente con datos mandatorios faltantes")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar Ingreso")]
        [Xunit.TraitAttribute("Description", "Ingresar paciente con datos mandatorios faltantes")]
        public async System.Threading.Tasks.Task IngresarPacienteConDatosMandatoriosFaltantes()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ingresar paciente con datos mandatorios faltantes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 47
 await testRunner.GivenAsync("que existe un paciente con DNI \"12345678\" y nombre \"Juan Pérez\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 48
 await testRunner.AndAsync("que existe una enfermera con matrícula \"ENF001\" y nombre \"María González\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
 await testRunner.WhenAsync("la enfermera intenta registrar un ingreso para el paciente omitiendo el informe", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 50
 await testRunner.ThenAsync("se emite un mensaje de error indicando que el informe es obligatorio", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ingresar paciente con frecuencia cardíaca negativa")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar Ingreso")]
        [Xunit.TraitAttribute("Description", "Ingresar paciente con frecuencia cardíaca negativa")]
        public async System.Threading.Tasks.Task IngresarPacienteConFrecuenciaCardiacaNegativa()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ingresar paciente con frecuencia cardíaca negativa", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 53
 await testRunner.GivenAsync("que existe un paciente con DNI \"12345678\" y nombre \"Juan Pérez\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 54
 await testRunner.AndAsync("que existe una enfermera con matrícula \"ENF001\" y nombre \"María González\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 55
 await testRunner.WhenAsync("la enfermera intenta registrar un ingreso con frecuencia cardíaca \"-10\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 56
 await testRunner.ThenAsync(("se emite un mensaje de error indicando que la frecuencia cardíaca no puede ser ne" +
                        "gativa"), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ingresar paciente con frecuencia respiratoria negativa")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar Ingreso")]
        [Xunit.TraitAttribute("Description", "Ingresar paciente con frecuencia respiratoria negativa")]
        public async System.Threading.Tasks.Task IngresarPacienteConFrecuenciaRespiratoriaNegativa()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ingresar paciente con frecuencia respiratoria negativa", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 59
 await testRunner.GivenAsync("que existe un paciente con DNI \"12345678\" y nombre \"Juan Pérez\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 60
 await testRunner.AndAsync("que existe una enfermera con matrícula \"ENF001\" y nombre \"María González\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 61
 await testRunner.WhenAsync("la enfermera intenta registrar un ingreso con frecuencia respiratoria \"-5\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 62
 await testRunner.ThenAsync(("se emite un mensaje de error indicando que la frecuencia respiratoria no puede se" +
                        "r negativa"), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verificar prioridad de atención - paciente crítico vs emergencia")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar Ingreso")]
        [Xunit.TraitAttribute("Description", "Verificar prioridad de atención - paciente crítico vs emergencia")]
        public async System.Threading.Tasks.Task VerificarPrioridadDeAtencion_PacienteCriticoVsEmergencia()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verificar prioridad de atención - paciente crítico vs emergencia", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 65
 await testRunner.GivenAsync("que existe un paciente A con DNI \"11111111\" y nombre \"Ana García\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 66
 await testRunner.AndAsync("que existe un paciente B con DNI \"22222222\" y nombre \"Carlos López\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 67
 await testRunner.AndAsync("que existe una enfermera con matrícula \"ENF001\" y nombre \"María González\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 68
 await testRunner.AndAsync("el paciente B está en espera con nivel de emergencia \"Emergencia\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 69
 await testRunner.WhenAsync("la enfermera registra un ingreso para el paciente A con nivel \"Critico\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 70
 await testRunner.ThenAsync("el paciente A debe ser atendido antes que el paciente B", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verificar prioridad de atención - mismo nivel, orden por fecha")]
        [Xunit.TraitAttribute("FeatureTitle", "Registrar Ingreso")]
        [Xunit.TraitAttribute("Description", "Verificar prioridad de atención - mismo nivel, orden por fecha")]
        public async System.Threading.Tasks.Task VerificarPrioridadDeAtencion_MismoNivelOrdenPorFecha()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verificar prioridad de atención - mismo nivel, orden por fecha", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 73
 await testRunner.GivenAsync("que existe un paciente A con DNI \"11111111\" y nombre \"Ana García\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 74
 await testRunner.AndAsync("que existe un paciente B con DNI \"22222222\" y nombre \"Carlos López\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 75
 await testRunner.AndAsync("que existe una enfermera con matrícula \"ENF001\" y nombre \"María González\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 76
 await testRunner.AndAsync(("el paciente B está en espera con nivel de emergencia \"Critico\" desde hace 10 minu" +
                        "tos"), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 77
 await testRunner.WhenAsync("la enfermera registra un ingreso para el paciente A con nivel \"Critico\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 78
 await testRunner.ThenAsync("el paciente B debe ser atendido antes que el paciente A", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await RegistrarIngresoFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await RegistrarIngresoFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
